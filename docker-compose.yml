services:
  # PostgreSQL Veritabanı Servisi
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: restaurant-db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: "123456789"
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
      - app-network

  # API Gateway Servisi (NestJS - Geliştirme Ortamı)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    env_file: # ENV_FILE KULLANIMI
      - ./api-gateway/.env
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    command: npm run start:dev
    networks:
      - app-network

  # Auth Service (NestJS - Geliştirme Ortamı)
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    env_file: # ENV_FILE KULLANIMI
      - ./services/auth-service/.env
    volumes:
      - ./services/auth-service:/app
      - /app/node_modules
    command: npm run start:dev
    networks:
      - app-network

  # Menu Service (NestJS - Geliştirme Ortamı)
  menu-service:
    build:
      context: ./services/menu-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      db:
        condition: service_healthy
    env_file: # ENV_FILE KULLANIMI
      - ./services/menu-service/.env
    volumes:
      - ./services/menu-service:/app
      - /app/node_modules
    command: npm run start:dev
    networks:
      - app-network

  # Order Service (NestJS - Geliştirme Ortamı)
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    depends_on:
      db:
        condition: service_healthy
    env_file: # ENV_FILE KULLANIMI
      - ./services/order-service/.env
    volumes:
      - ./services/order-service:/app
      - /app/node_modules
    command: npm run start:dev
    networks:
      - app-network

  # Payment Service (NestJS - Geliştirme Ortamı)
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    depends_on:
      db:
        condition: service_healthy
    env_file: # ENV_FILE KULLANIMI
      - ./services/payment-service/.env
    volumes:
      - ./services/payment-service:/app
      - /app/node_modules
    command: npm run start:dev
    networks:
      - app-network

  # Restaurant Service (Yeni Eklenen Servis - NestJS - Geliştirme Ortamı)
  restaurant-service:
    build:
      context: ./services/restaurant-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    depends_on:
      db:
        condition: service_healthy
    env_file: # ENV_FILE KULLANIMI
      - ./services/restaurant-service/.env
    volumes:
      - ./services/restaurant-service:/app
      - /app/node_modules
    command: npm run start:dev
    networks:
      - app-network

  # Frontend Servisi (Vue.js - Nginx ile Servis Ediliyor)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    networks:
      - app-network
    depends_on:
      api-gateway:
        condition: service_started

# Ortak Ağ Tanımlaması
networks:
  app-network:
    driver: bridge

# Veritabanı Verileri için Volume
volumes:
  db_data:


# DOCKER İÇİN ÖNEMLİ DURDURMA VE BAŞLATMA SIRA İLE
# docker compose down --volumes --remove-orphans
# docker compose up --build -d